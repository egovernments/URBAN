import React, { useEffect, useState } from "react";
import { Dropdown, TextInput, Loader } from "@egovernments/digit-ui-react-components";

const OtherDetailsSection = ({
  t,
  propertyDetails,
  handlePropertyDetailsChange,
  checkboxes,
  handleCheckboxChange,
  styles,
  formErrors,
  setSelectedRateZone
}) => {

  const stateId = Digit.ULBService.getStateId();
  const { data: Menu = {}, isLoading } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "AssessmentYear") || {};
  const { data: OwnerType = {}, isLoadingO } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "OwnerType") || {};
  const { data: EssentialTax = {}, isLoadingOe } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "EssentialTax") || {};
  console.log("EssentialTaxMenu", EssentialTax);
  const [propertyTypeOptions, setPropertyTypeOptions] = useState([]);
  const [ownerTypeOptions, setOwnerTypeOptions] = useState([]);
  const [essentialTaxOptions, setEssentialTaxOptions] = useState([]);


  useEffect(() => {
    if (Menu?.PropertyTax?.PropertyType?.length) {
      const options = Menu.PropertyTax.PropertyType.map((item) => ({
        code: item.code,
        name: t("COMMON_PROPTYPE_" + item.code.replace(/\./g, "_")),
      })).sort((a, b) => a.name.localeCompare(b.name));
      setPropertyTypeOptions(options);
    }
  }, [Menu]);
  // useEffect(() => {
  //   if (OwnerType?.length) {
  //     const options = OwnerType.map((item) => ({
  //       code: item.code,
  //       name: t(item.name),
  //     }));
  //     setOwnerTypeOptions(options);
  //   }
  // }, [isLoadingO, OwnerType]);
  useEffect(() => {
    if (OwnerType?.length) {
      const filteredItems = OwnerType.filter((item) => item.fromFY === "2025-26");

      if (filteredItems.length) {
        const options = filteredItems.map((item) => ({
          code: item.code,
          name: t(item.name),
        }));
        setOwnerTypeOptions(options);
      }
    }
  }, [isLoadingO, OwnerType]);
  useEffect(() => {
    if (EssentialTax?.length) {
      const options = EssentialTax.map((item) => ({
        code: item.code,
        name: item.name, // show name directly (ATM, Bank, etc.)
        applicableRateZone: item.applicableRateZone,
      }));
      setEssentialTaxOptions(options);
    }
  }, [isLoadingOe, EssentialTax]);
  if (isLoading) return <Loader />;
  return (

    <div>

      {/* Other Details Heading */}
      <div style={styles.assessmentStyle}>{t("Other Details")}</div>

      {/* Property Info */}
      {/* <div style={styles.formSection}> */}
      {/* Property Type */}
      {/* <div style={styles.flex30}>
          <div style={styles.poppinsLabel}>{t("Property Type")}</div>
          <Dropdown
            style={styles.widthInput}
            t={t}
            option={propertyTypeOptions}
            selected={propertyDetails.propertyType}
            select={(option) => handlePropertyDetailsChange("propertyType", option)}
            optionKey="name"
            placeholder={t("Select")}
          />
        </div> */}

      {/* Rooms/Area */}
      {/* <div style={styles.flex30}>
          <div style={styles.poppinsLabel}>{t("Rooms/Area")}</div>
          <TextInput
            style={styles.widthInput}
            placeholder={t("Enter")}
            value={propertyDetails.roomsArea}
            onChange={(e) => handlePropertyDetailsChange("roomsArea", e.target.value)}
          />
        </div> */}

      {/* Exemption */}
      <div className="form-section" style={{ ...styles.formSection, alignItems: "center" }}>
        {/* Door/House Number */}
        <div style={styles.flex302}>

          <div style={styles.poppinsLabel}>{t("Exemption Applicable")}</div>
          <Dropdown
            style={styles.widthInput}
            t={t}
            option={ownerTypeOptions}
            selected={propertyDetails.ownerType}
            select={(option) => handlePropertyDetailsChange("exemption", option)}
            optionKey="name"
            placeholder={t("Select")}
          />
        </div>
        <div style={styles.flex302}>

          <div style={styles.poppinsLabel}>{t("Essential Tax")}</div>
          <Dropdown
            style={styles.widthInput}
            t={t}
            option={essentialTaxOptions}
            selected={propertyDetails.essentialTax}
            select={(option) => {
              handlePropertyDetailsChange("essentialTax", option);
              setSelectedRateZone(option.applicableRateZone); // ЁЯФе set new state
            }}
            optionKey="name"
            placeholder={t("Select")}
          />
        </div>
        <div >
          <div style={styles.checkboxContainer}>
            <div>
              <label style={styles.poppinsLabels}>
                {t("Mobile Tower")}{" "}
                <input
                  type="checkbox"
                  checked={checkboxes.mobileTower}
                  onChange={() => handleCheckboxChange("mobileTower")}
                />
              </label>
            </div>
            <div>
              <label style={styles.poppinsLabels}>
                {t("Bond Road")}{" "}
                <input
                  type="checkbox"
                  checked={checkboxes.broadRoad}
                  onChange={() => handleCheckboxChange("broadRoad")}
                />
              </label>
            </div>
            <div>
              <label style={styles.poppinsLabels}>
                {t("Advertisement")}{" "}
                <input
                  type="checkbox"
                  checked={checkboxes.advertisement}
                  onChange={() => handleCheckboxChange("advertisement")}
                />
              </label>
            </div>
          </div>
        </div>
      </div>
      {/* </div> */}

      {/* Additional Checkboxes */}


      {/* Self Declaration */}
      {/* <div style={styles.poppinsLabel}>{t("Self Declaration")}</div>
      <label style={styles.poppinsTextStyle}>
        <input
          style={{ marginRight: "10px" }}
          type="checkbox"
          checked={checkboxes.selfDeclaration}
          onChange={() => handleCheckboxChange("selfDeclaration")}
        />{"    "}
        {t(
          " рдореИрдВ рдпрд╣ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░рддрд╛ / рдХрд░рддреА рд╣реВрдВ рдХрд┐ рдЙрдкрд░реЛрдХреНрдд рд╡рд┐рд╡рд░рдгреА рдореЗ рджреА рдЧрдпреА рдЬрд╛рдирдХрд╛рд░реА рд╕рддреНрдп рд╣реИред рдореИрдиреЗ / рд╣рдордиреЗ рдЬрд┐рд╕ рднрд╡рди/ рднреВрдорд┐ рдХреЗ рд╕рдВрдмрдВрдз рдореЗ рд╡рд┐рд╡рд░рдгреА рдкреНрд░рд╕реНрддреБрдд рдХреА рд╣реИ рдЙрд╕рдХрд╛ рдореИрдВ рд╕реНрд╡рд╛рдореА/рдЕрдзрд┐рднреЛрдЧреА рд╣реВрдВ рдЗрд╕рдореЗ рдХреЛрдИ рднреА рддрдереНрдп рдЫреВ рдкрд╛рдпреЗ рдЕрдерд╡рд╛ рдЧрд▓рдд рдирд╣реАрдВ рд╣реИред рдиреЛрдЯ - рдордзреНрдпрдкреНрд░рджреЗрд╢ рдирдЧрд░ рдкрд╛рд▓рд┐рдХрд╛ (рд╡рд╛рд░реНрд╖рд┐рдХ рднрд╛рдбрд╝рд╛ рдореВрд▓реНрдп рдХрд╛ рдЕрд╡рдзрд╛рд░рдгрд╛) рдирд┐рдпрдо 1997 рдХреЗ рдирд┐рдпрдо 10 (1) рдЕрдВрддрд░реНрдЧрдд рдкреНрд░рддреНрдпреЗрдХ рднрд╡рди рд╕реНрд╡рд╛рдореА рдХреЛ рд╕реНрд╡ рдирд┐рд░реНрдзрд╛рд░рдг рд╡рд┐рд╡рд░рдгреА (Self Assessment Form) рдХреЗ рд╕рд╛рде рд╕рдВрд▓рдЧреНрдирдХ (Attachment) scan рдХрд░ рд╕рдмреНрдорд┐рдЯ рдХрд░реЗрдВ ред рд╕реНрд╡ рдирд┐рд░реНрдзрд╛рд░рдг рд╡рд┐рд╡рд░рдгреА рдореМрдХреЗ рдкрд░ рд╕рддреНрдпрд╛рдкрди рдХреЗ рдЕрдзреНрдпрд╛рдзреАрди рд░рд╣реЗрдЧреА, рдЬрд╛рдБрдЪ рдореЗ рдЕрдВрддрд░ рдкрд╛рдпреЗ рдЬрд╛рдиреЗ рдкрд░ рдпрд╛ рдЕрдиреНрдп рдХрд╛рд░рдг рд╕реЗ рдЖрд╡рд╢реНрдпрдХ рдкрд╛рдпреЗ рдЬрд╛рдиреЗ рдкрд░ рд╡рд╛рд░реНрд╖рд┐рдХ рднрд╛рдбрд╝рд╛ рдореВрд▓реНрдп рдХрд╛ рдкреБрд░реНрдирд┐рд░реНрдзрд╛рд░рдг рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ рд╡ 0 рдкреНрд░рддрд┐рд╢рдд рд╕реЗ рдЕрдзрд┐рдХ рдЕрдВрддрд░ рдкрд╛рдпреЗ рдЬрд╛рдиреЗ рдкрд░ рд╕рдореНрдкрддрд┐рдХрд░ рдХреЗ рдкреБрд░реНрдирд┐рд░реНрдзрд╛рд░рдг рдХреЗ рдЕрдВрддрд░ рдХреА рд░рд╛рд╢рд┐ рдХреА рдкрд╛рдБрдЪ рдЧреБрдирд╛ рд╢рд╛рд╕реНрддрд┐ ,рдЕрдзрд┐рд░реЛрдкрд┐рдд рдХреА рдЬрд╛ рд╕рдХреЗрдЧреАред"
        )}
      </label>
      {formErrors?.selfDeclaration && (
        <p style={{ color: "red", fontSize: "12px", marginTop: "4px" }}>
          {formErrors.selfDeclaration}
        </p>
      )} */}
    </div>
  );
};

export default OtherDetailsSection;
